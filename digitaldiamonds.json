{"files":[{"id":"9f46dc4e-9b90-4f92-9764-d197efa954dd","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"Africa/Johannesburg\",\n  \"dependencies\": {\n    \"libraries\": [\n      {\n        \"userSymbol\": \"DigitalDiamonds\",\n        \"version\": \"0\",\n        \"libraryId\": \"1IxZjcKuY3DdDm1PL_0zAd4jX-ZPiaZyK4S4xj2W53J6yykX_3cCCU13X\",\n        \"developmentMode\": true\n      }\n    ],\n    \"enabledAdvancedServices\": [\n      {\n        \"userSymbol\": \"AdSense\",\n        \"version\": \"v2\",\n        \"serviceId\": \"adsense\"\n      },\n      {\n        \"userSymbol\": \"YouTubeContentId\",\n        \"version\": \"v1\",\n        \"serviceId\": \"youtubePartner\"\n      },\n      {\n        \"userSymbol\": \"Gmail\",\n        \"version\": \"v1\",\n        \"serviceId\": \"gmail\"\n      },\n      {\n        \"userSymbol\": \"Analytics\",\n        \"version\": \"v3\",\n        \"serviceId\": \"analytics\"\n      },\n      {\n        \"userSymbol\": \"AdminLicenseManager\",\n        \"version\": \"v1\",\n        \"serviceId\": \"licensing\"\n      },\n      {\n        \"userSymbol\": \"YouTubeAnalytics\",\n        \"version\": \"v2\",\n        \"serviceId\": \"youtubeAnalytics\"\n      },\n      {\n        \"userSymbol\": \"AnalyticsAdmin\",\n        \"version\": \"v1alpha\",\n        \"serviceId\": \"analyticsadmin\"\n      },\n      {\n        \"userSymbol\": \"Area120Tables\",\n        \"version\": \"v1alpha1\",\n        \"serviceId\": \"area120tables\"\n      }\n    ]\n  },\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\",\n  \"webapp\": {\n    \"executeAs\": \"USER_DEPLOYING\",\n    \"access\": \"MYSELF\"\n  }\n}"},{"id":"45b3c796-e8a1-4466-9869-99a3caae9eb4","name":"Code","type":"server_js","source":"function myFunction() {\n  const DEFAULT_INPUT_TEXT \u003d \u0027\u0027;\nconst DEFAULT_OUTPUT_TEXT \u003d \u0027\u0027;\nconst DEFAULT_ORIGIN_LAN \u003d \u0027\u0027; // Empty string means detect langauge\nconst DEFAULT_DESTINATION_LAN \u003d \u0027en\u0027 // English\n\nconst LANGUAGE_MAP \u003d\n  [\n    { text: \u0027Detect Language\u0027, val: \u0027\u0027 },\n    { text: \u0027Afrikaans\u0027, val: \u0027af\u0027 },\n    { text: \u0027Albanian\u0027, val: \u0027sq\u0027 },\n    { text: \u0027Amharic\u0027, val: \u0027am\u0027 },\n    { text: \u0027Arabic\u0027, val: \u0027ar\u0027 },\n    { text: \u0027Armenian\u0027, val: \u0027hy\u0027 },\n    { text: \u0027Azerbaijani\u0027, val: \u0027az\u0027 },\n    { text: \u0027Basque\u0027, val: \u0027eu\u0027 },\n    { text: \u0027Belarusian\u0027, val: \u0027be\u0027 },\n    { text: \u0027Bengali\u0027, val: \u0027bn\u0027 },\n    { text: \u0027Bosnian\u0027, val: \u0027bs\u0027 },\n    { text: \u0027Bulgarian\u0027, val: \u0027bg\u0027 },\n    { text: \u0027Catalan\u0027, val: \u0027ca\u0027 },\n    { text: \u0027Cebuano\u0027, val: \u0027ceb\u0027 },\n    { text: \u0027Chinese (Simplified)\u0027, val: \u0027zh-CN\u0027 },\n    { text: \u0027Chinese (Traditional)\u0027, val: \u0027zh-TW\u0027 },\n    { text: \u0027Corsican\u0027, val: \u0027co\u0027 },\n    { text: \u0027Croatian\u0027, val: \u0027hr\u0027 },\n    { text: \u0027Czech\u0027, val: \u0027cs\u0027 },\n    { text: \u0027Danish\u0027, val: \u0027da\u0027 },\n    { text: \u0027Dutch\u0027, val: \u0027nl\u0027 },\n    { text: \u0027English\u0027, val: \u0027en\u0027 },\n    { text: \u0027Esperanto\u0027, val: \u0027eo\u0027 },\n    { text: \u0027Estonian\u0027, val: \u0027et\u0027 },\n    { text: \u0027Finnish\u0027, val: \u0027fi\u0027 },\n    { text: \u0027French\u0027, val: \u0027fr\u0027 },\n    { text: \u0027Frisian\u0027, val: \u0027fy\u0027 },\n    { text: \u0027Galician\u0027, val: \u0027gl\u0027 },\n    { text: \u0027Georgian\u0027, val: \u0027ka\u0027 },\n    { text: \u0027German\u0027, val: \u0027de\u0027 },\n    { text: \u0027Greek\u0027, val: \u0027el\u0027 },\n    { text: \u0027Gujarati\u0027, val: \u0027gu\u0027 },\n    { text: \u0027Haitian Creole\u0027, val: \u0027ht\u0027 },\n    { text: \u0027Hausa\u0027, val: \u0027ha\u0027 },\n    { text: \u0027Hawaiian\u0027, val: \u0027haw\u0027 },\n    { text: \u0027Hebrew\u0027, val: \u0027he\u0027 },\n    { text: \u0027Hindi\u0027, val: \u0027hi\u0027 },\n    { text: \u0027Hmong\u0027, val: \u0027hmn\u0027 },\n    { text: \u0027Hungarian\u0027, val: \u0027hu\u0027 },\n    { text: \u0027Icelandic\u0027, val: \u0027is\u0027 },\n    { text: \u0027Igbo\u0027, val: \u0027ig\u0027 },\n    { text: \u0027Indonesian\u0027, val: \u0027id\u0027 },\n    { text: \u0027Irish\u0027, val: \u0027ga\u0027 },\n    { text: \u0027Italian\u0027, val: \u0027it\u0027 },\n    { text: \u0027Japanese\u0027, val: \u0027ja\u0027 },\n    { text: \u0027Javanese\u0027, val: \u0027jv\u0027 },\n    { text: \u0027Kannada\u0027, val: \u0027kn\u0027 },\n    { text: \u0027Kazakh\u0027, val: \u0027kk\u0027 },\n    { text: \u0027Khmer\u0027, val: \u0027km\u0027 },\n    { text: \u0027Korean\u0027, val: \u0027ko\u0027 },\n    { text: \u0027Kurdish\u0027, val: \u0027ku\u0027 },\n    { text: \u0027Kyrgyz\u0027, val: \u0027ky\u0027 },\n    { text: \u0027Lao\u0027, val: \u0027lo\u0027 },\n    { text: \u0027Latin\u0027, val: \u0027la\u0027 },\n    { text: \u0027Latvian\u0027, val: \u0027lv\u0027 },\n    { text: \u0027Lithuanian\u0027, val: \u0027lt\u0027 },\n    { text: \u0027Luxembourgish\u0027, val: \u0027lb\u0027 },\n    { text: \u0027Macedonian\u0027, val: \u0027mk\u0027 },\n    { text: \u0027Malagasy\u0027, val: \u0027mg\u0027 },\n    { text: \u0027Malay\u0027, val: \u0027ms\u0027 },\n    { text: \u0027Malayalam\u0027, val: \u0027ml\u0027 },\n    { text: \u0027Maltese\u0027, val: \u0027mt\u0027 },\n    { text: \u0027Maori\u0027, val: \u0027mi\u0027 },\n    { text: \u0027Marathi\u0027, val: \u0027mr\u0027 },\n    { text: \u0027Mongolian\u0027, val: \u0027mn\u0027 },\n    { text: \u0027Myanmar (Burmese)\u0027, val: \u0027my\u0027 },\n    { text: \u0027Nepali\u0027, val: \u0027ne\u0027 },\n    { text: \u0027Norwegian\u0027, val: \u0027no\u0027 },\n    { text: \u0027Nyanja (Chichewa)\u0027, val: \u0027ny\u0027 },\n    { text: \u0027Pashto\u0027, val: \u0027ps\u0027 },\n    { text: \u0027Persian\u0027, val: \u0027fa\u0027 },\n    { text: \u0027Polish\u0027, val: \u0027pl\u0027 },\n    { text: \u0027Portuguese (Portugal, Brazil)\u0027, val: \u0027pt\u0027 },\n    { text: \u0027Punjabi\u0027, val: \u0027pa\u0027 },\n    { text: \u0027Romanian\u0027, val: \u0027ro\u0027 },\n    { text: \u0027Russian\u0027, val: \u0027ru\u0027 },\n    { text: \u0027Samoan\u0027, val: \u0027sm\u0027 },\n    { text: \u0027Scots Gaelic\u0027, val: \u0027gd\u0027 },\n    { text: \u0027Serbian\u0027, val: \u0027sr\u0027 },\n    { text: \u0027Sesotho\u0027, val: \u0027st\u0027 },\n    { text: \u0027Shona\u0027, val: \u0027sn\u0027 },\n    { text: \u0027Sindhi\u0027, val: \u0027sd\u0027 },\n    { text: \u0027Sinhala (Sinhalese)\u0027, val: \u0027si\u0027 },\n    { text: \u0027Slovak\u0027, val: \u0027sk\u0027 },\n    { text: \u0027Slovenian\u0027, val: \u0027sl\u0027 },\n    { text: \u0027Somali\u0027, val: \u0027so\u0027 },\n    { text: \u0027Spanish\u0027, val: \u0027es\u0027 },\n    { text: \u0027Sundanese\u0027, val: \u0027su\u0027 },\n    { text: \u0027Swahili\u0027, val: \u0027sw\u0027 },\n    { text: \u0027Swedish\u0027, val: \u0027sv\u0027 },\n    { text: \u0027Tagalog (Filipino)\u0027, val: \u0027tl\u0027 },\n    { text: \u0027Tajik\u0027, val: \u0027tg\u0027 },\n    { text: \u0027Tamil\u0027, val: \u0027ta\u0027 },\n    { text: \u0027Telugu\u0027, val: \u0027te\u0027 },\n    { text: \u0027Thai\u0027, val: \u0027th\u0027 },\n    { text: \u0027Turkish\u0027, val: \u0027tr\u0027 },\n    { text: \u0027Ukrainian\u0027, val: \u0027uk\u0027 },\n    { text: \u0027Urdu\u0027, val: \u0027ur\u0027 },\n    { text: \u0027Uzbek\u0027, val: \u0027uz\u0027 },\n    { text: \u0027Vietnamese\u0027, val: \u0027vi\u0027 },\n    { text: \u0027Welsh\u0027, val: \u0027cy\u0027 },\n    { text: \u0027Xhosa\u0027, val: \u0027xh\u0027 },\n    { text: \u0027Yiddish\u0027, val: \u0027yi\u0027 },\n    { text: \u0027Yoruba\u0027, val: \u0027yo\u0027 },\n    { text: \u0027Zulu\u0027, val: \u0027zu\u0027 }\n  ];\n\n\n/**\n * Callback for rendering the main card.\n * @return {CardService.Card} The card to show the user.\n */\nfunction onHomepage(e) {\n  return createSelectionCard(e, DEFAULT_ORIGIN_LAN, DEFAULT_DESTINATION_LAN, DEFAULT_INPUT_TEXT, DEFAULT_OUTPUT_TEXT);\n}\n\n/**\n * Main function to generate the main card.\n * @param {String} originLanguage Language of the original text.\n * @param {String} destinationLanguage Language of the translation.\n * @param {String} inputText The text to be translated.\n * @param {String} outputText The text translated.\n * @return {CardService.Card} The card to show to the user.\n */\nfunction createSelectionCard(e, originLanguage, destinationLanguage, inputText, outputText) {\n  var hostApp \u003d e[\u0027hostApp\u0027];\n  var builder \u003d CardService.newCardBuilder();\n\n  // \"From\" language selection \u0026 text input section\n  var fromSection \u003d CardService.newCardSection()\n    .addWidget(generateLanguagesDropdown(\u0027origin\u0027, \u0027From: \u0027, originLanguage))\n    .addWidget(CardService.newTextInput()\n      .setFieldName(\u0027input\u0027)\n      .setValue(inputText)\n      .setTitle(\u0027Enter text...\u0027)\n      .setMultiline(true));\n\n  if (hostApp \u003d\u003d\u003d \u0027docs\u0027) {\n    fromSection.addWidget(CardService.newButtonSet()\n      .addButton(CardService.newTextButton()\n        .setText(\u0027Get Selection\u0027)\n        .setOnClickAction(CardService.newAction().setFunctionName(\u0027getDocsSelection\u0027))\n        .setDisabled(false)))\n  } else if (hostApp \u003d\u003d\u003d \u0027sheets\u0027) {\n    fromSection.addWidget(CardService.newButtonSet()\n      .addButton(CardService.newTextButton()\n        .setText(\u0027Get Selection\u0027)\n        .setOnClickAction(CardService.newAction().setFunctionName(\u0027getSheetsSelection\u0027))\n        .setDisabled(false)))\n  } else if (hostApp \u003d\u003d\u003d \u0027slides\u0027) {\n    fromSection.addWidget(CardService.newButtonSet()\n      .addButton(CardService.newTextButton()\n        .setText(\u0027Get Selection\u0027)\n        .setOnClickAction(CardService.newAction().setFunctionName(\u0027getSlidesSelection\u0027))\n        .setDisabled(false)))\n  }\n\n\n  builder.addSection(fromSection);\n\n  // \"Translation\" language selection \u0026 text input section\n  builder.addSection(CardService.newCardSection()\n    .addWidget(generateLanguagesDropdown(\u0027destination\u0027, \u0027To: \u0027, destinationLanguage))\n    .addWidget(CardService.newTextInput()\n      .setFieldName(\u0027output\u0027)\n      .setValue(outputText)\n      .setTitle(\u0027Translation...\u0027)\n      .setMultiline(true)));\n\n  //Buttons section\n  builder.addSection(CardService.newCardSection()\n    .addWidget(CardService.newButtonSet()\n      .addButton(CardService.newTextButton()\n        .setText(\u0027Translate\u0027)\n        .setTextButtonStyle(CardService.TextButtonStyle.FILLED)\n        .setOnClickAction(CardService.newAction().setFunctionName(\u0027translateText\u0027))\n        .setDisabled(false))\n      .addButton(CardService.newTextButton()\n        .setText(\u0027Clear\u0027)\n        .setOnClickAction(CardService.newAction().setFunctionName(\u0027clearText\u0027))\n        .setDisabled(false))));\n\n  return builder.build();\n\n}\n\n/**\n * Helper function to generate the drop down language menu. It checks what language the user had selected.\n * @param {String} fieldName\n * @param {String} fieldTitle\n * @param {String} previousSelected The language the user previously had selected.\n * @return {CardService.SelectionInput} The card to show to the user.\n */\nfunction generateLanguagesDropdown(fieldName, fieldTitle, previousSelected) {\n  var selectionInput \u003d CardService.newSelectionInput().setTitle(fieldTitle)\n    .setFieldName(fieldName)\n    .setType(CardService.SelectionInputType.DROPDOWN);\n\n  LANGUAGE_MAP.forEach((language, index, array) \u003d\u003e {\n    selectionInput.addItem(language.text, language.val, language.val \u003d\u003d previousSelected);\n  })\n\n  return selectionInput;\n}\n\n/**\n * Helper function to translate the text. If the originLanguage is an empty string, the API detects the language\n * @return {CardService.Card} The card to show to the user.\n */\nfunction translateText(e) {\n  var originLanguage \u003d e.formInput.origin;\n  var destinationLanguage \u003d e.formInput.destination;\n  var inputText \u003d e.formInput.input;\n\n  if (originLanguage !\u003d\u003d destinationLanguage \u0026\u0026 inputText !\u003d\u003d undefined) {\n    var translation \u003d LanguageApp.translate(e.formInput.input, e.formInput.origin, e.formInput.destination);\n    return createSelectionCard(e, originLanguage, destinationLanguage, inputText, translation);\n  }\n}\n\n/**\n * Helper function to clean the text.\n * @return {CardService.Card} The card to show to the user.\n */\nfunction clearText(e) {\n  var originLanguage \u003d e.formInput.origin;\n  var destinationLanguage \u003d e.formInput.destination;\n  return createSelectionCard(e, originLanguage, destinationLanguage, DEFAULT_INPUT_TEXT, DEFAULT_OUTPUT_TEXT);\n}\n\n/**\n * Helper function to get the text selected.\n * @return {CardService.Card} The selected text.\n */\nfunction getDocsSelection(e) {\n  var text \u003d \u0027\u0027;\n  var selection \u003d DocumentApp.getActiveDocument().getSelection();\n  Logger.log(selection)\n  if (selection) {\n    var elements \u003d selection.getRangeElements();\n    for (var i \u003d 0; i \u003c elements.length; i++) {\n      Logger.log(elements[i]);\n      var element \u003d elements[i];\n      // Only modify elements that can be edited as text; skip images and other non-text elements.\n      if (element.getElement().asText() \u0026\u0026 element.getElement().asText().getText() !\u003d\u003d \u0027\u0027) {\n        text +\u003d element.getElement().asText().getText() + \u0027\\n\u0027;\n      }\n    }\n  }\n\n  if (text !\u003d\u003d \u0027\u0027) {\n    var originLanguage \u003d e.formInput.origin;\n    var destinationLanguage \u003d e.formInput.destination;\n    var translation \u003d LanguageApp.translate(text, e.formInput.origin, e.formInput.destination);\n    return createSelectionCard(e, originLanguage, destinationLanguage, text, translation);\n  }\n}\n\n/**\n * Helper function to get the text of the selected cells.\n * @return {CardService.Card} The selected text.\n */\nfunction getSheetsSelection(e) {\n  var text \u003d \u0027\u0027;\n  var ranges \u003d SpreadsheetApp.getActive().getSelection().getActiveRangeList().getRanges();\n  for (var i \u003d 0; i \u003c ranges.length; i++) {\n    const range \u003d ranges[i];\n    const numRows \u003d range.getNumRows();\n    const numCols \u003d range.getNumColumns();\n    for (let i \u003d 1; i \u003c\u003d numCols; i++) {\n      for (let j \u003d 1; j \u003c\u003d numRows; j++) {\n        const cell \u003d range.getCell(j, i);\n        if (cell.getValue()) {\n          text +\u003d cell.getValue() + \u0027\\n\u0027;\n        }\n      }\n    }\n  }\n  if (text !\u003d\u003d \u0027\u0027) {\n    var originLanguage \u003d e.formInput.origin;\n    var destinationLanguage \u003d e.formInput.destination;\n    var translation \u003d LanguageApp.translate(text, e.formInput.origin, e.formInput.destination);\n    return createSelectionCard(e, originLanguage, destinationLanguage, text, translation);\n  }\n}\n\n/**\n * Helper function to get the selected text of the active slide.\n * @return {CardService.Card} The selected text.\n */\nfunction getSlidesSelection(e) {\n  var text \u003d \u0027\u0027;\n  var selection \u003d SlidesApp.getActivePresentation().getSelection();\n  var selectionType \u003d selection.getSelectionType();\n  if (selectionType \u003d\u003d\u003d SlidesApp.SelectionType.TEXT) {\n    var textRange \u003d selection.getTextRange();\n    if (textRange.asString() !\u003d\u003d \u0027\u0027) {\n      text +\u003d textRange.asString() + \u0027\\n\u0027;\n    }\n  }\n  if (text !\u003d\u003d \u0027\u0027) {\n    var originLanguage \u003d e.formInput.origin;\n    var destinationLanguage \u003d e.formInput.destination;\n    var translation \u003d LanguageApp.translate(text, e.formInput.origin, e.formInput.destination);\n    return createSelectionCard(e, originLanguage, destinationLanguage, text, translation);\n  }\n}\n\n}\n"},{"id":"678f5f7a-cf01-44da-a2e3-93166dfe078a","name":"Untitled","type":"server_js","source":"function myFunction() {\n  \n}\n"},{"id":"94445cb1-155f-409a-b3e1-12bfdbd1ff78","name":"Untitled 2","type":"server_js","source":"function myFunction() {\n  \n}\n"},{"id":"0aa00f52-7755-4e6f-99b8-05b51b0dcbce","name":"Untitled 3","type":"html","source":"\u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n  \u003chead\u003e\n    \u003cbase target\u003d\"_top\"\u003e\n  \u003c/head\u003e\n  \u003cbody\u003e\n    \n  \u003c/body\u003e\n\u003c/html\u003e\n"},{"id":"0603ec28-b323-408c-b12c-c5af043f7c5c","name":"Untitled 4","type":"server_js","source":"function myFunction() {\n  \n}\n"}]}